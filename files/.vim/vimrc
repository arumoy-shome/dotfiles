" see :h defaults.vim for more details
unlet! skip_default_vim
source $VIMRUNTIME/defaults.vim

" settings {{{
set laststatus=2

set number
set relativenumber

set ignorecase
set smartcase
set infercase

set splitright
set splitbelow

set noswapfile

set clipboard+=unnamed

set breakindent
set linebreak
set nojoinspaces
set autoindent

set autowrite
set autoread

" XXX see :h fo-table for more details
" I prefer to wrap the text automatically, but not comments
set formatoptions=t
set formatoptions+=r
set formatoptions+=o
set formatoptions+=/
set formatoptions+=q
set formatoptions+=n
set formatoptions+=l
set formatoptions+=1
set formatoptions+=j
" set textwidth=70

" XXX see :help sortmess for more info
set shortmess=a " short for shortmess=filmnrwx
set shortmess+=o
set shortmess+=O
set shortmess+=s
set shortmess+=t
set shortmess+=T
set shortmess+=W
set shortmess+=I

set wildmenu
set wildoptions=pum
set wildmode=longest:full
set wildmode+=full

set list
set listchars=nbsp:⦸
set listchars+=extends:»
set listchars+=precedes:«
set listchars+=tab:▷⋯
set listchars+=trail:•

set fillchars=diff:∙
set fillchars+=fold:∙
set fillchars+=eob: 
set fillchars+=vert:┃

set spelllang=en,nl

" start unfolded
set foldlevelstart=99
" end settings }}}

" autocommands {{{
function! AruWindowAutocmds() abort
  augroup AruWindow
    autocmd!
    autocmd VimResized * wincmd =
  augroup END
endfunction
call AruWindowAutocmds()

function! AruHelptagsAutocmds() abort
  augroup AruHelptags
    autocmd!
    autocmd VimEnter * helptags ALL
  augroup END
endfunction
call AruHelptagsAutocmds()

" end autocommands }}}

" keybindings {{{
let mapleader = "\<Space>"
nmap <leader>so :source $MYVIMRC<cr>
" nmap j gj
" nmap k gk
if v:count == 0
  nmap j gj
  nmap k gk
endif
nmap <leader>q :quit<cr>
nmap <esc> :noh<cr>

" end keybindings }}}

" ftplugin {{{
function! AruFiletypePlugins() abort
  augroup AruFiletypePlugins
    autocmd!
    autocmd FileType gitcommit setlocal spell
    autocmd FileType man,help let b:EditorConfig_disable = 1
    autocmd FileType quarto setlocal filetype=markdown.quarto
  augroup END
endfunction
call AruFiletypePlugins()
" end ftplugin }}}

" statusline {{{1
set statusline=\ 
set statusline+=%<
set statusline+=%{aru#statusline_fileprefix()}
set statusline+=%t
set statusline+=\ 
set statusline+=%([%{aru#statusline_ft()}%{aru#statusline_fenc()}%R%M]%)
set statusline+=%=
set statusline+=\ 
set statusline+=%l:%L:%P
set statusline+=\ 
" }}}

" spacing {{{1
" XXX Uncomment the following settings to indent using (two) spaces if vim does
" not ship with editorconfig plugin
" set expandtab
" set tabstop=2
" set shiftwidth=2
" set smarttab
packadd editorconfig
" }}}

" pack {{{1
" vim-plug {{{2
" XXX Use single quotes as per vim-plug README
call plug#begin()
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-apathy'
Plug 'tpope/vim-git'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-commentary'
Plug 'wincent/terminus'
Plug 'wincent/loupe'
Plug 'wincent/ferret'
Plug 'wincent/pinnacle'
Plug 'junegunn/vim-easy-align'
if isdirectory('/usr/local/opt/fzf')
  Plug '/usr/local/opt/fzf'
else
  " fzf does not exist on the device so install it
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
endif
Plug 'junegunn/fzf.vim'
Plug 'lervag/vimtex'
Plug 'jpalardy/vim-slime'
call plug#end()
" end vim-plug}}}
" vimtex {{{2
let g:vimtex_fold_enabled = 1 " turn on folding in tex files
let g:vimtex_bib_fold_enabled = 1 " turn on folding in bib files
" end vimtex}}}
" fzf {{{2
nmap <leader>t :Files<cr>
nmap <leader><leader> :Buffers<cr>
nmap <leader>h :Helptags<cr>
nmap <leader>l :BLines<cr>
nmap <leader>. :BTags<cr>

" NOTE: stolen from fzf.vim README
" Preview window is hidden by default. You can toggle it with ctrl-/.
" It will show on the right with 50% width, but if the width is smaller
" than 70 columns, it will show above the candidate list
let g:fzf_vim = {}
let g:fzf_vim.preview_window = []
" end fzf}}}
" markdown {{{2
let g:markdown_folding = 1
" end markdown}}}
" ferret {{{2
let g:FerretMap = 0 " do not create keybindings
" end ferret }}}
" vim-easy-align {{{2
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" end vim-easy-align }}}
" vim-slime {{{2
let g:slime_target = 'tmux'
let g:slime_bracketed_paste = 1
" end vim-slime}}}
" end pack }}}

" highlights {{{1
if has('termguicolors')
  set termguicolors
endif
function! AruHighlights() abort
  augroup AruHighlights
    autocmd!
    autocmd VimEnter,ColorScheme * call aru#highlight_overrides()
  augroup END

  augroup AruColors
    autocmd!
    autocmd FocusGained,VimEnter * call aru#update_colors()
  augroup END
endfunction
call AruHighlights()
" end highlights }}}

" vim:foldmethod=marker foldlevelstart=99
